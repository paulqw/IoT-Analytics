# Calculate Global_power in kWh
df_add$Global_power <- df_ycompl1$Global_intensity*df_ycompl1$Voltage/1000/60
df_add$Global_active_power <- df_ycompl1$Global_active_power/60
df_add$Global_reactive_power <- df_ycompl1$Global_reactive_power/60
df_add$Sub_metering_1 <- df_ycompl1$Sub_metering_1/1000
df_add$Sub_metering_2 <- df_ycompl1$Sub_metering_2/1000
df_add$Sub_metering_3 <- df_ycompl1$Sub_metering_3/1000
## Calculating Sub_rest energy [kWh] (consumption of electrical equipment not measured by sub-meters)
df_add$Sub_rest <- (df_add$Global_active_power-df_add$Sub_metering_1-df_add$Sub_metering_2-df_add$Sub_metering_3)
#### Initial visualization
#### Monthly ####
## Create Time format
df_monthly <- mutate(df_add, Monthly = paste(year(DateTime),formatC(month(DateTime), width = 2, flag = "0")))
## Change granularity - Summarise
df_monthly <- df_monthly %>% group_by(Monthly) %>%
summarise(GAP = sum(Global_active_power), GRP = sum(Global_reactive_power), GP = sum(Global_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
#### Weekly ####
## Create Time format
df_weekly <- mutate(df_add, Weekly = paste(year(DateTime), formatC(week(DateTime), width = 2, flag = "0")))
## Change granularity - Summarise
df_weekly <- df_weekly %>% group_by(Weekly) %>%
summarise(GAP = sum(Global_active_power), GRP = sum(Global_reactive_power), GP = sum(Global_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
#### Daily ####
## Create Time format
df_daily <- mutate(df_add, Daily = paste(year(DateTime), formatC(month(DateTime), width = 2, flag = "0"),
formatC(day(DateTime), width = 2, flag = "0")))
## Change granularity - Summarise
df_daily <- df_daily %>% group_by(Daily) %>%
summarise(GAP = sum(Global_active_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
#### Hourly ####
## Create Time format
df_hourly <- mutate(df_add, Hourly = paste(year(DateTime), formatC(month(DateTime), width = 2, flag = "0"),
formatC(day(DateTime), width = 2, flag = "0"),
formatC(hour(DateTime), width = 2, flag = "0")))
## Change granularity - Summarise
df_hourly <- df_hourly %>% group_by(Hourly) %>%
summarise(GAP = sum(Global_active_power), GRP = sum(Global_reactive_power), GP = sum(Global_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
## Create TS objects
tsGAP_m <- ts(df_monthly$GAP, frequency = 12, start = c(2007, 1))
tsGAP_w <- ts(df_weekly$GAP, frequency = 52, start = c(2007, 1))
tsGAP_d <- ts(df_daily$GAP, frequency = 365, start = c(2007, 1))
## Achieve stationarity
# Seasonal Differencing
#Differencing a time series means, to subtract each data point in the series from its successor.
#It is commonly used to make a time series stationary
nsdiffs(tsGAP_m)  # number for seasonal differencing needed; to be > 1
nsdiffs(tsGAP_w)
nsdiffs(tsGAP_d)
tsGAP_m_seasdiff <- diff(tsGAP_monthly, lag = frequency(tsGAP_monthly), differences = 1)
tsGAP_m_seasdiff <- diff(tsGAP_m, lag = frequency(tsGAP_m), differences = 1)
plot(tsGAP_monthly_seasdiff, type="l", main="Seasonally Differenced")  # still not stationary!
plot(tsGAP_m_seasdiff, type="l", main="Seasonally Differenced")  # still not stationary!
# Make it stationary
ndiffs(tsGAP_m_seasdiff)  # number of differences need to make it stationary
#> 1
stationaryTS <- diff(tsGAP_m_seasdiff, differences= 1)
# Make it stationary
ndiffs(tsGAP_m_seasdiff)  # number of differences need to make it stationary; to be > 1
stationaryTS <- diff(tsGAP_m_seasdiff, differences= 1)
plot(stationaryTS, type="l", main="Differenced and Stationary")  # appears to be stationary
## Achieve stationarity
# Seasonal Differencing
#Differencing a time series means, to subtract each data point in the series from its successor.
#It is commonly used to make a time series stationary
nsdiffs(tsGAP_m)  # number for seasonal differencing needed; to be > 1
# Make it stationary
ndiffs(tsGAP_m_seasdiff)  # number of differences need to make it stationary; to be > 1
stationaryTS <- diff(tsGAP_m_seasdiff, differences= 1)
plot(stationaryTS, type="l", main="Differenced and Stationary")  # appears to be stationary
## msts/stl & decompose
tsGAP_m_stl <- stl(tsGAP_m, s.window = "periodic")
tsGAP_w_stl <- stl(tsGAP_w, s.window = "periodic")
tsGAP_d_stl <- stl(tsGAP_d, s.window = "periodic")
# Decompose multiperiod
tsGAP_d_msts <- msts(tsGAP_daily, seasonal.periods = c(12, 52, 365))
# Decompose multiperiod
tsGAP_d_msts <- msts(tsGAP_d, seasonal.periods = c(12, 52, 365))
comp_tsGAP_d <- decompose(tsGAP_d_msts, type = "additive")
plot(tsGAP_m_stl)
plot(tsGAP_w_stl)
plot(tsGAP_d_stl)
plot(comp_tsGAP_d) ## ??
## De-seasonalize
# Monthly
tsGAP_m_sa <- seasadj(tsGAP_m_stl)  # de-seasonalize
plot(tsGAP_m, type = "l")  # original series
plot(tsGAP_m_sa, type = "l")  # seasonal adjusted
seasonplot(tsGAP_m_sa, 12, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: GAP_monthly") # seasonal frequency set as 12 for monthly data.
# Weekly
tsGAP_w_sa <- seasadj(tsGAP_w_stl)  # de-seasonalize
plot(tsGAP_w, type = "l")  # original series
plot(tsGAP_w_sa, type = "l")  # seasonal adjusted
seasonplot(tsGAP_w_sa, 52, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: GAP_weekly") # seasonal frequency set as 12 for monthly data.
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 3))
# weekly
tsGAP_w_train <- window(tsGAP_w, start = c(2007, 1), end = c(2009, 13))
#daily
tsGAP_d_train <- window(tsGAP_d, start = c(2007, 1), end = c(2009, 92))
#daily
tsGAP_d_train <- window(tsGAP_d, start = c(2007, 1), end = c(2009, 92))
# weekly
tsGAP_w_train <- window(tsGAP_w, start = c(2007, 1), end = c(2009, 13))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
aA_GAP_w <- auto.arima(tsGAP_w_train)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
fc_aA_GAP_w <- forecast::forecast(aA_GAP_w, h = 40)
plot(fc_aA_GAP_m)
plot(fc_aA_GAP_w)
plot(fc_aA_GAP_d)
autoplot(tsGAP_monthly) + autolayer(fc_aA_GAP_m, series = "Arima", PI = FALSE)
autoplot(tsGAP_m) + autolayer(fc_aA_GAP_m, series = "Arima", PI = FALSE)
autoplot(tsGAP_w) + autolayer(fc_aA_GAP_w, series = "Arima", PI = FALSE)
tsGAP_m_dec <- decompose(tsGAP_m, type = "additive")
plot(tsGAP_m_dec)
plot(tsGAP_m_stl)
plot(tsGAP_m_dec)
plot(tsGAP_m_stl)
tsGAP_m_stl$deg
tsGAP_m_stl$weights
plot(tsGAP_m_stl$)
plot(tsGAP_m_stl$time.series
)
View(tsGAP_m_dec)
View(tsGAP_m_dec)
View(tsGAP_m_stl)
View(tsGAP_m_stl)
tsGAP_m_stl[["time.series"]]
tsGAP_m_dec$random
plot(tsGAP_m_dec)
plot(tsGAP_w_stl)
df_test <- tsGAP_m_stl$time.series
df_test
df_test <- data.frame(tsGAP_m_stl$time.series)
df_test$remainder
# Safe
tsGAP_m_stl_components <- data.frame(tsGAP_m_stl$time.series)
# plot
plot(tsGAP_m_stl$time.series)
# plot
plot(tsGAP_m_stl)
plot(tsGAP_m_dec)
plot(tsGAP_w_stl)
plot(tsGAP_d_stl)
plot(tsGAP_m_dec)
plot(comp_tsGAP_d) ## ??
## De-seasonalize
# Monthly
tsGAP_m_sa <- seasadj(tsGAP_m_stl)  # de-seasonalize
plot(tsGAP_m, type = "l")  # original series
plot(tsGAP_m_sa, type = "l")  # seasonal adjusted
seasonplot(tsGAP_m_sa, 12, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: GAP_monthly") # seasonal frequency set as 12 for monthly data.
# Weekly
tsGAP_w_sa <- seasadj(tsGAP_w_stl)  # de-seasonalize
plot(tsGAP_w, type = "l")  # original series
plot(tsGAP_w_sa, type = "l")  # seasonal adjusted
seasonplot(tsGAP_w_sa, 52, col = rainbow(12), year.labels = TRUE, main = "Seasonal plot: GAP_weekly") # seasonal frequency set as 12 for monthly data.
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 3))
# weekly
tsGAP_w_train <- window(tsGAP_w, start = c(2007, 1), end = c(2009, 13))
#daily
tsGAP_d_train <- window(tsGAP_d, start = c(2007, 1), end = c(2009, 92))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
aA_GAP_w <- auto.arima(tsGAP_w_train)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
fc_aA_GAP_w <- forecast::forecast(aA_GAP_w, h = 40)
plot(fc_aA_GAP_m)
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 4))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
tsGAP_m_stl_components
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
autoplot(tsGAP_m) + autolayer(fc_aA_GAP_m, series = "Arima", PI = FALSE)
autoplot(tsGAP_w) + autolayer(fc_aA_GAP_w, series = "Arima", PI = FALSE)
plot(fc_aA_GAP_m)
plot(fc_aA_GAP_w)
plot(fc_aA_GAP_m)
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 3))
autoplot(tsGAP_m) + autolayer(fc_aA_GAP_m, series = "Arima", PI = FALSE)
plot(fc_aA_GAP_m)
fc_aA_GAP_m
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8)
plot(fc_aA_GAP_m)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8, level = 80)
plot(fc_aA_GAP_m)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8, level = 90)
plot(fc_aA_GAP_m)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8, level = 70)
plot(fc_aA_GAP_m)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8)
plot(fc_aA_GAP_m)
fc_aA_GAP_m
fc_aA_GAP_m
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8, )
aA_GAP_m
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 4))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 8)
plot(fc_aA_GAP_m)
aA_GAP_m
fc_aA_GAP_m
tsGAP_m_train
aA_GAP_m
fc_aA_GAP_m
autoplot(tsGAP_m) + autolayer(fc_aA_GAP_m, series = "Arima", PI = FALSE)
fc_aA_GAP_m
fc_aA_GAP_m$series
fc_aA_GAP_m$fitted
plot(fc_aA_GAP_m$fitted)
fc_aA_GAP_m$x
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 3))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
aA_GAP_w <- auto.arima(tsGAP_w_train)
## Forecast
fc_aA_GAP_m$x <- forecast(aA_GAP_m, h = 9)
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
plot(fc_aA_GAP_m)
plot(fc_aA_GAP_w)
plot(fc_aA_GAP_m)
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 4))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
plot(fc_aA_GAP_m)
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 5))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
fc_aA_GAP_w <- forecast::forecast(aA_GAP_w, h = 40)
plot(fc_aA_GAP_m)
fc_aA_GAP_m
## Data splitting
# Monthly
tsGAP_m_train <- window(tsGAP_m, start = c(2007, 1), end = c(2009, 3))
## Train model + CV
aA_GAP_m <- auto.arima(tsGAP_m_train) ## ??
## Forecast
fc_aA_GAP_m <- forecast(aA_GAP_m, h = 9)
plot(fc_aA_GAP_m)
autoplot(tsGAP_m) + autolayer(fc_aA_GAP_m, series = "Arima", PI = FALSE)
autoplot(tsGAP_w) + autolayer(fc_aA_GAP_w, series = "Arima", PI = FALSE)
p_load(contrib.url, doParallel, here, readr, rstudioapi,        #parallel computing, relative path
#caret, C50, caretEnsemble, mboost, mlr, Metrics, randomForest, party, MASS,
#ParamHelpers, hydroGOF #Classification and Regression
#cluster, corrplot, fpc, e1071, recipes, Hmisc, #Clustering: Corr visulization, Clustering & SVM,
ggplot2, ggpubr, RColorBrewer, lattice, dygraphs, #Visualization
ade4, inum, reshape,  #Cleaning, Preprocessing
#FactoMineR, factoextra, #PCA, MCA
plyr, dplyr, tidyr, tidyverse, textclean,
#arules, arulesViz,    # ASsociation Rules Mining: analyzing and visualize transactional data
#markdown, shiny, tinytex, rmdformats, knitr #html docu, dashboard, Latex for PDF docu
RMySQL, lubridate, # Time Series: MySQL, functions for DateTime
#BBmisc, asbio
imputeTS, padr, #interpolate missing values (Time Series)
forecast, tseries, Prophet #aTSA #Time Series
)
install.packages("prophet")
library(prophet)
## Train Prophet
Proph_GAP_m <- prophet(tsGAP_m_train)
## Train Prophet
Proph_GAP_m <- prophet(tsGAP_m)
## Train Prophet
Proph_GAP_m <- prophet(tsGAP_w_train)
tsGAP_w_train
tsGAP_m
View(df_monthly)
View(df_monthly)
View(df_hourly)
View(df_hourly)
## Train Prophet
df_proph <- df_monthly[ , c(1:2)]
colnames(df_proph) <- c("ds", "y")
View(df_proph)
View(df_proph)
## Train Prophet
df_proph <- df_monthly[ , c(1:2)]
df_proph
## Train Prophet
df_proph <- df_monthly[c(1:27) , c(1:2)]
colnames(df_proph) <- c("ds", "y")
View(df_hourly)
View(df_proph)
View(df_proph)
Proph_GAP_m <- prophet(df_proph)
View(df_weekly)
View(df_weekly)
View(df_ycompl1)
View(df_ycompl1)
View(df_daily)
View(df_daily)
## Train Prophet
df_proph <- df_daily[c(1:822) , c(1:2)]
colnames(df_proph) <- c("ds", "y")
Proph_GAP_m <- prophet(df_proph)
View(df_proph)
View(df_proph)
#### Daily ####
## Create Time format
df_daily <- mutate(df_add, Daily = paste(year(DateTime),"-", formatC(month(DateTime),"-", width = 2, flag = "0"),
formatC(day(DateTime), width = 2, flag = "0")))
View(df_daily)
View(df_daily)
#### Daily ####
## Create Time format
df_daily <- mutate(df_add, Daily = paste(year(DateTime),"-", formatC(month(DateTime),"-", width = 2, flag = "0"),
formatC(day(DateTime), width = 0, flag = "0")))
View(df_daily)
View(df_daily)
#### Daily ####
## Create Time format
df_daily <- mutate(df_add, Daily = paste(year(DateTime)"-"formatC(month(DateTime),"-", width = 2, flag = "0"),
formatC(day(DateTime), width = 2, flag = "0")))
#### Daily ####
## Create Time format
df_daily <- mutate(df_add, Daily = paste(year(DateTime),"-",formatC(month(DateTime),"-", width = 2, flag = "0"),
formatC(day(DateTime), width = 2, flag = "0")))
View(df_daily)
View(df_daily)
#### Daily ####
## Create Time format
df_daily <- mutate(df_add, Daily = paste(year(DateTime), formatC(month(DateTime), width = 2, flag = "0"),
formatC(day(DateTime), width = 2, flag = "0")))
## Change granularity - Summarise
df_daily <- df_daily %>% group_by(Daily) %>%
summarise(GAP = sum(Global_active_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
str(df_proph)
df_ycompl1$Date <- date(df_ycompl1$DateTime)
View(df_ycompl1)
View(df_ycompl1)
sum(is.na(df_ycompl1))
df_ycompl1$Time <- time(df_ycompl1$DateTime)
sum(is.na(df_ycompl1))
diff1 <- anti_join(df_ycompl1, df_ycompl, by = NULL)
diff <- anti_join(df_ycompl1, df_ycompl, by = NULL)
View(df_ycompl1)
View(df_ycompl1)
#### Pre-processing ####
## Creating DateTime attribute
# Combine Date and Time attribute values in a new attribute column
df_ycompl <- cbind(df_ycompl, paste(df_ycompl$Date, df_ycompl$Time), stringsAsFactors = FALSE)
colnames(df_ycompl)[ncol(df_ycompl)] <- "DateTime"
# Move the DateTime attribute within the dataset
df_ycompl <- df_ycompl[, c(ncol(df_ycompl), 1:(ncol(df_ycompl)-1))]
#Sys.setenv(TZ = "Europe/Berlin")
df_ycompl$DateTime <- as.POSIXct(df_ycompl$DateTime, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Add the time zone (Remains UTC)
attr(df_ycompl$DateTime, "tzone") <- "GMT"
tz(df_ycompl$DateTime)
# Descriptive statistics
summary(df_ycompl[,c(5, 9:11)])
## Add missing values
df_ycompl1 <- pad(df_ycompl, break_above = 2)
diff <- anti_join(df_ycompl1, df_ycompl, by = NULL)
list_all_raw <- readRDS(file = "../Data/Smart_Home_rawList.rds")
df_raw_all <- readRDS(file = "../Data/Smart_Home_rawDF.rds")
df_ycompl <- bind_rows(list_all_raw[[2]], list_all_raw[[3]], list_all_raw[[4]])
#### Pre-processing ####
## Creating DateTime attribute
# Combine Date and Time attribute values in a new attribute column
df_ycompl <- cbind(df_ycompl, paste(df_ycompl$Date, df_ycompl$Time), stringsAsFactors = FALSE)
colnames(df_ycompl)[ncol(df_ycompl)] <- "DateTime"
# Move the DateTime attribute within the dataset
df_ycompl <- df_ycompl[, c(ncol(df_ycompl), 1:(ncol(df_ycompl)-1))]
#Sys.setenv(TZ = "Europe/Berlin")
df_ycompl$DateTime <- as.POSIXct(df_ycompl$DateTime, format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# Add the time zone (Remains UTC)
attr(df_ycompl$DateTime, "tzone") <- "GMT"
tz(df_ycompl$DateTime)
## Add missing values
df_ycompl1 <- pad(df_ycompl, break_above = 2)
diff <- anti_join(df_ycompl1, df_ycompl, by = NULL)
df_ycompl1 <- na_interpolation(df_ycompl1, option = "linear")
diff1 <- anti_join(df_ycompl1, df_ycompl, by = NULL)
View(diff1)
View(diff1)
df_ycompl1$Date <- date(diff1$DateTime)
diff1$Date <- date(diff1$DateTime)
View(diff)
View(diff)
diff1$Time <- time(diff1$DateTime)
df_ycompl1$Date <- date(df_ycompl1$DateTime)
sum(is.na(df_ycompl1))
df_daily_proph <- df_ycompl1 %>% group_by(Date) %>%
summarise(GAP = sum(Global_active_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
df_daily_proph <- df_add %>% group_by(Date) %>%
summarise(GAP = sum(Global_active_power),
sub1 = sum(Sub_metering_1), sub2 = sum(Sub_metering_2), sub3 = sum(Sub_metering_3), sub_rest = sum(Sub_rest))
View(df_daily_proph)
View(df_daily_proph)
View(df_daily_proph)
View(df_daily_proph)
## Train Prophet
df_proph <- df_daily_proph[c(1:822) , c(1:2)]
str(df_proph)
colnames(df_proph) <- c("ds", "y")
Proph_GAP_m <- prophet(df_proph)
Proph_GAP_m <- prophet(df_proph, daily.seasonality = TRUE)
future = make_future_dataframe(Proph_GAP_m, periods = 273)
View(future)
View(future)
Proph_GAP_m
future
forecast = predict(Proph_GAP_m, future)
# Visualize forecast
plot(Proph_GAP_m, forecast)
forecast
## Train Prophet
df_proph <- df_daily_proph[c(1:822) , c(1:2)]
colnames(df_proph) <- c("ds", "y")
Proph_GAP_m <- prophet(df_proph, daily.seasonality = TRUE)
# Forecast
future = make_future_dataframe(Proph_GAP_m, periods = 273)
forecast = predict(Proph_GAP_m, future)
# Visualize forecast
plot(Proph_GAP_m, forecast)
View(df_proph)
View(df_proph)
future
# Forecast
future = make_future_dataframe(Proph_GAP_m, periods = 272)
future
View(df_daily)
View(df_daily)
View(df_daily_proph)
View(df_daily_proph)
df_proph
View(df_proph)
View(df_proph)
View(df_daily_proph)
View(df_daily_proph)
df_proph
## Train Prophet
df_proph <- df_daily_proph[c(1:822) , c(1:2)]
colnames(df_proph) <- c("ds", "y")
Proph_GAP_m <- prophet(df_proph, daily.seasonality = TRUE)
Proph_GAP_m
# Forecast
future = make_future_dataframe(Proph_GAP_m, periods = 273)
future
forecast
# Visualize forecast
plot(Proph_GAP_m, forecast)
plot(tsGAP_m, type = "l")  # original series
plot(tsGAP_m_sa, type = "l")  # seasonal adjusted
autoplot(tsGAP_m_sa)
## HoltWinters Forecasting
# Seasonal adjusting (see above)
plot(tsGAP_m, type = "l")
autoplot(tsGAP_m_sa)
## HoltWinters Forecasting
# Seasonal adjusting (see above)
autoplot(tsGAP_m)
autoplot(tsGAP_m_sa)
# Test Seasonal Adjustment by running Decompose again --> very, very small scale for Seasonal
plot(decompose(tsGAP_m_sa))
plot(decompose(tsGAP_m))
# Test Seasonal Adjustment by running Decompose again --> very, very small scale for Seasonal
plot(decompose(tsGAP_m))
plot(decompose(tsGAP_m_sa))
# Test Seasonal Adjustment by running Decompose again --> very, very small scale for Seasonal
plot(decompose(tsGAP_m))
plot(decompose(tsGAP_m_sa))
# Holt Winters Exponential Smoothing & Plot
fc_HW_GAP_m <- HoltWinters(tsGAP_m_sa, beta = FALSE, gamma = FALSE)
plot(fc_HW_GAP_m, ylim = c(0, .03))
plot(fc_HW_GAP_m, ylim = c(0, 1000))
# Holt Winters Exponential Smoothing (training) & Plot
HW_GAP_m <- HoltWinters(tsGAP_m_sa, beta = FALSE, gamma = FALSE)
plot(HW_GAP_m, ylim = c(0, 1000))
# HoltWinters forecast & plot
fc_HW_GAP_m <- forecast(HW_GAP_m, h = 9)
plot(fc_HW_GAP_m, ylim = c(0, 1000), ylab = "kWh", xlab = "Time - GAP")
autoplot(tsGAP_w) + autolayer(fc_HW_GAP_m, series = "Arima", PI = FALSE)
